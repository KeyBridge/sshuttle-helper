#!/usr/bin/env bash
# DESCRIPTION
#   Automatic proxy opening based on sshuttle
#
# USAGE
#   sudo proxy-ssh start[ username@server[:port]]
#   sudo proxy-ssh restart[ username@server[:port]]
#   sudo proxy-ssh stop
#   sudo proxy-ssh status
#
# AUTHOR
# 	Credit for the original script go to Salem Harrache's article:
#	    http://salem.harrache.info/proxy-socks-partout.html


### BEGIN INIT INFO
# Provides:          proxy-ssh
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop Transparent proxy server for VPN over SSH
# Description:       Provide a wrapper around sshuttle
### END INIT INFO


name="proxy-ssh"

sshserver="$2"
user="${sshserver%%@*}"
server="${sshserver##*@}"
  host="${server%%:*}"
  port=${server##*:}
  port=${port:-22}

pidFile="$HOME"/.local/var/run/$name
mkdir -p "$(dirname "$pidFile")"

# Arrêt du service
function proxy_stop {
  if [[ -f "$pidFile" ]] ; then
    echo "Stopping $name..."
    sudo -u "$USER" kill -9 $(cat "$pidFile")
    sudo -u "$USER" rm "$pidFile" && echo "OK"
  fi
}

# Démarrage du service
function proxy_start {
  # malformed ssh address
  [[ "$sshserver" != *@* || -z "$user" || -z "$host" ]] && usage

  echo "Starting $name..."
  sudo -u "$USER" sshuttle \
    -r $user@$host:$port 0/0 \
    --dns -D \
    --pidfile "$pidFile" && echo "OK"
}


function proxy_status() {
  PID=$(proxy_pid) || true
  if [ -n "$PID" ]; then
    echo "$name is running (pid $PID)."
    exit 0
  else
    echo "$name is NOT running."
  if [ -e "$PIDFILE" ]; then
    exit 1
  else
    exit 3
    fi
  fi
}

# TODO: fake it as I'm not aware a config file to 'reload'
function proxy_reload() {
    proxy_stop
    proxy_start
}


function proxy_usage() {
  echo "Usage: $(basename $0) start|restart[ username@server[:port]]|stop|status "
  exit 1
}

function proxy_pid() {
  # if there is actually an apache2 process whose pid is in pidFile,
  # print it and return 0.
  if [ -e "$pidFile" ]; then
    if pidof "python" | tr ' ' '\n' | grep -w $(cat $pidFile); then
      return 0
    fi
  fi
  return 1
}


# commandes
case $1 in
  start)
    proxy_start
  ;;
  stop)
    proxy_stop
  ;;
  restart)
    proxy_stop
    proxy_start
  ;;
  reload | force-reload | graceful)
    proxy_reload
  ;;
  status)
    proxy_status
  ;;
  *)
    proxy_usage
esac
